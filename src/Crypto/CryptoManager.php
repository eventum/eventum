<?php

/*
 * This file is part of the Eventum (Issue Tracking System) package.
 *
 * @copyright (c) Eventum Team
 * @license GNU General Public License, version 2 or later (GPL-2+)
 *
 * For the full copyright and license information,
 * please see the COPYING and AUTHORS files
 * that were distributed with this source code.
 */

namespace Eventum\Crypto;

use CannotPerformOperationException;
use Crypto;
use CryptoTestFailedException;
use InvalidArgumentException;
use InvalidCiphertextException;
use Setup;

/**
 * Class Crypto Manager.
 *
 * Provides methods to encrypt/decrypt a text using own private key.
 * The encrypted value is base64 encoded so it's safe to store to database.
 *
 * @package Eventum\Crypto
 */
final class CryptoManager
{
    /**
     * @return bool return true if Encryption is enabled
     */
    public static function encryptionEnabled()
    {
        return Setup::get()->encryption == 'enabled';
    }

    /**
     * Checks if system can perform encryption:
     * - has mcrypt extension
     * - some other tests performed by Crypto library
     *
     * @throws CryptoException if it can't be enabled
     * @return bool
     */
    public static function canEncrypt()
    {
        if (!function_exists('openssl_encrypt')) {
            throw new CryptoException('openssl extension not enabled');
        }
        if (!function_exists('mcrypt_create_iv')) {
            throw new CryptoException('mcrypt extension not enabled');
        }
        try {
            Crypto::RuntimeTest();
        } catch (CryptoTestFailedException $e) {
            throw new CryptoException($e->getMessage(), $e->getCode(), $e);
        }

        return true;
    }

    /**
     * Encrypts a message.
     * $plaintext is the message to encrypt.
     * $key is the encryption key, a value generated by CreateNewRandomKey().
     *
     * @param string $plaintext
     * @param string $key optional key to encrypt
     * @return string
     * @throws CryptoException
     */
    public static function encrypt($plaintext, $key = null)
    {
        if ($plaintext === null || $plaintext === false) {
            throw new InvalidArgumentException('Refusing to encrypt empty value');
        }

        if (!self::encryptionEnabled()) {
            return $plaintext;
        }

        try {
            $ciphertext = Crypto::encrypt($plaintext, $key ?: self::getKey());
        } catch (CryptoTestFailedException $e) {
            throw new CryptoException('Cannot safely perform encryption');
        } catch (CannotPerformOperationException $e) {
            throw new CryptoException('Cannot safely perform encryption');
        }

        return rtrim(base64_encode($ciphertext), '=');
    }

    /**
     * Decrypts a ciphertext.
     * $ciphertext is the ciphertext to decrypt.
     *
     * @param string $ciphertext
     * @return string
     * @throws CryptoException
     */
    public static function decrypt($ciphertext)
    {
        if (!self::encryptionEnabled()) {
            return $ciphertext;
        }

        try {
            $decrypted = Crypto::decrypt(base64_decode($ciphertext), self::getKey());
        } catch (InvalidCiphertextException $e) {
            // VERY IMPORTANT
            // Either:
            //   1. The ciphertext was modified by the attacker,
            //   2. The key is wrong, or
            //   3. $ciphertext is not a valid ciphertext or was corrupted.
            // Assume the worst.
            throw new CryptoException('The ciphertext has been tampered with');
        } catch (CryptoTestFailedException $e) {
            throw new CryptoException('Cannot safely perform encryption');
        } catch (CannotPerformOperationException $e) {
            throw new CryptoException('Cannot safely perform encryption');
        }

        return $decrypted;
    }

    private static function getKey()
    {
        $km = new CryptoKeyManager();

        return $km->getKey();
    }
}
